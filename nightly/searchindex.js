Search.setIndex({"docnames": ["bibliography", "index", "reference/abc", "reference/all", "reference/asset", "reference/classes", "reference/data", "reference/enums", "reference/fairseq2.dependency", "reference/functions", "reference/generated/abc/fairseq2.gang.Gang", "reference/generated/classes/fairseq2.optim.lr_scheduler.CosineAnnealingLR", "reference/generated/classes/fairseq2.optim.lr_scheduler.MyleLR", "reference/generated/classes/fairseq2.optim.lr_scheduler.NoamLR", "reference/generated/classes/fairseq2.optim.lr_scheduler.PolynomialDecayLR", "reference/generated/data/fairseq2.assets.AssetCard", "reference/generated/data/fairseq2.assets.AssetMetadataProvider", "reference/generated/data/fairseq2.assets.AssetStore", "reference/generated/data/fairseq2.data.ByteStreamError", "reference/generated/data/fairseq2.data.CollateOptionsOverride", "reference/generated/data/fairseq2.data.Collater", "reference/generated/data/fairseq2.data.DataPipeline", "reference/generated/data/fairseq2.data.DataPipelineBuilder", "reference/generated/data/fairseq2.data.DataPipelineError", "reference/generated/data/fairseq2.data.FileMapper", "reference/generated/data/fairseq2.data.RecordError", "reference/generated/data/fairseq2.data.VocabularyInfo", "reference/generated/data/fairseq2.data.get_last_failed_example", "reference/generated/data/fairseq2.data.list_files", "reference/generated/data/fairseq2.data.read_sequence", "reference/generated/data/fairseq2.data.read_zipped_records", "reference/generated/data/fairseq2.data.text.read_text", "reference/generated/data_text/fairseq2.data.text.LineEnding", "reference/generated/data_text/fairseq2.data.text.SentencePieceDecoder", "reference/generated/data_text/fairseq2.data.text.SentencePieceEncoder", "reference/generated/data_text/fairseq2.data.text.SentencePieceModel", "reference/generated/data_text/fairseq2.data.text.StrSplitter", "reference/generated/data_text/fairseq2.data.text.StrToIntConverter", "reference/generated/data_text/fairseq2.data.text.StrToTensorConverter", "reference/generated/data_text/fairseq2.data.text.TextTokenDecoder", "reference/generated/data_text/fairseq2.data.text.TextTokenEncoder", "reference/generated/data_text/fairseq2.data.text.TextTokenizer", "reference/generated/data_text/fairseq2.data.text.vocab_info_from_sentencepiece", "reference/generated/enums/fairseq2.nn.transformer.TransformerNormOrder", "reference/generated/functions/fairseq2.nn.utils.mask.to_float_mask", "reference/index"], "filenames": ["bibliography.rst", "index.rst", "reference/abc.rst", "reference/all.rst", "reference/asset.rst", "reference/classes.rst", "reference/data.rst", "reference/enums.rst", "reference/fairseq2.dependency.rst", "reference/functions.rst", "reference/generated/abc/fairseq2.gang.Gang.rst", "reference/generated/classes/fairseq2.optim.lr_scheduler.CosineAnnealingLR.rst", "reference/generated/classes/fairseq2.optim.lr_scheduler.MyleLR.rst", "reference/generated/classes/fairseq2.optim.lr_scheduler.NoamLR.rst", "reference/generated/classes/fairseq2.optim.lr_scheduler.PolynomialDecayLR.rst", "reference/generated/data/fairseq2.assets.AssetCard.rst", "reference/generated/data/fairseq2.assets.AssetMetadataProvider.rst", "reference/generated/data/fairseq2.assets.AssetStore.rst", "reference/generated/data/fairseq2.data.ByteStreamError.rst", "reference/generated/data/fairseq2.data.CollateOptionsOverride.rst", "reference/generated/data/fairseq2.data.Collater.rst", "reference/generated/data/fairseq2.data.DataPipeline.rst", "reference/generated/data/fairseq2.data.DataPipelineBuilder.rst", "reference/generated/data/fairseq2.data.DataPipelineError.rst", "reference/generated/data/fairseq2.data.FileMapper.rst", "reference/generated/data/fairseq2.data.RecordError.rst", "reference/generated/data/fairseq2.data.VocabularyInfo.rst", "reference/generated/data/fairseq2.data.get_last_failed_example.rst", "reference/generated/data/fairseq2.data.list_files.rst", "reference/generated/data/fairseq2.data.read_sequence.rst", "reference/generated/data/fairseq2.data.read_zipped_records.rst", "reference/generated/data/fairseq2.data.text.read_text.rst", "reference/generated/data_text/fairseq2.data.text.LineEnding.rst", "reference/generated/data_text/fairseq2.data.text.SentencePieceDecoder.rst", "reference/generated/data_text/fairseq2.data.text.SentencePieceEncoder.rst", "reference/generated/data_text/fairseq2.data.text.SentencePieceModel.rst", "reference/generated/data_text/fairseq2.data.text.StrSplitter.rst", "reference/generated/data_text/fairseq2.data.text.StrToIntConverter.rst", "reference/generated/data_text/fairseq2.data.text.StrToTensorConverter.rst", "reference/generated/data_text/fairseq2.data.text.TextTokenDecoder.rst", "reference/generated/data_text/fairseq2.data.text.TextTokenEncoder.rst", "reference/generated/data_text/fairseq2.data.text.TextTokenizer.rst", "reference/generated/data_text/fairseq2.data.text.vocab_info_from_sentencepiece.rst", "reference/generated/enums/fairseq2.nn.transformer.TransformerNormOrder.rst", "reference/generated/functions/fairseq2.nn.utils.mask.to_float_mask.rst", "reference/index.rst"], "titles": ["Bibliography", "fairseq2 documentation", "ABCs and Protocols", "All", "fairseq2.assets", "Classes", "fairseq2.data", "Enums", "fairseq2.dependency", "Functions", "Gang", "CosineAnnealingLR", "MyleLR", "NoamLR", "PolynomialDecayLR", "AssetCard", "AssetMetadataProvider", "AssetStore", "fairseq2.data.ByteStreamError", "CollateOptionsOverride", "Collater", "DataPipeline", "DataPipelineBuilder", "fairseq2.data.DataPipelineError", "FileMapper", "fairseq2.data.RecordError", "VocabularyInfo", "get_last_failed_example", "list_files", "read_sequence", "read_zipped_records", "read_text", "LineEnding", "SentencePieceDecoder", "SentencePieceEncoder", "SentencePieceModel", "StrSplitter", "StrToIntConverter", "StrToTensorConverter", "TextTokenDecoder", "TextTokenEncoder", "TextTokenizer", "vocab_info_from_sentencepiece", "TransformerNormOrder", "to_float_mask", "API Reference"], "terms": {"lh17": [0, 11], "ilya": 0, "loshchilov": [0, 11], "frank": 0, "hutter": [0, 11], "sgdr": 0, "stochast": 0, "gradient": 0, "descent": 0, "warm": 0, "restart": [0, 11], "2017": 0, "arxiv": 0, "1608": 0, "03983": 0, "swo21": [0, 43], "sam": 0, "shleifer": [0, 43], "jason": 0, "weston": 0, "myle": [0, 12], "ott": [0, 12], "normform": 0, "improv": 0, "transform": [0, 43], "pretrain": 0, "extra": 0, "normal": [0, 43], "2021": 0, "url": 0, "http": 0, "org": 0, "ab": 0, "2110": 0, "09456": 0, "doi": 0, "10": [0, 6, 22, 37], "48550": 0, "vsp": [0, 13, 43], "17": [0, 13, 43], "ashish": 0, "vaswani": [0, 13, 43], "noam": [0, 12, 13], "shazeer": [0, 13], "niki": 0, "parmar": 0, "jakob": 0, "uszkoreit": 0, "llion": 0, "jone": 0, "aidan": 0, "n": 0, "gomez": 0, "lukasz": 0, "kaiser": 0, "illia": 0, "polosukhin": 0, "attent": 0, "i": [0, 1, 4, 6, 8, 11, 12, 13, 14, 20, 21, 22, 24, 25, 26, 34, 40, 41], "all": [0, 1, 4, 8, 10, 11, 12, 14, 17, 19, 20, 21, 22, 24, 28, 36], "you": [0, 6, 24], "need": [0, 8, 20], "1706": 0, "03762": 0, "xyh": [0, 43], "20": [0, 43], "ruibin": 0, "xiong": [0, 43], "yunchang": 0, "yang": 0, "di": 0, "he": 0, "kai": 0, "zheng": 0, "shuxin": 0, "chen": 0, "xing": 0, "huishuai": 0, "zhang": 0, "yanyan": 0, "lan": 0, "liwei": 0, "wang": 0, "tie": 0, "yan": 0, "liu": 0, "On": 0, "layer": [0, 43], "architectur": 0, "2020": 0, "2002": 0, "04745": 0, "sequenc": [1, 10, 11, 12, 14, 20, 21, 22, 26, 29, 33, 36, 39], "model": [1, 13, 33, 34, 42], "toolkit": 1, "allow": [1, 4, 20, 21], "research": 1, "develop": 1, "train": [1, 11, 12, 13, 14], "custom": [1, 22], "translat": [1, 41], "summar": 1, "languag": [1, 41], "other": [1, 6, 8, 21], "content": [1, 24], "gener": [1, 21, 22, 41], "task": [1, 41], "api": [1, 4, 8, 22], "depend": [1, 45], "data": [1, 4, 19, 20, 21, 22, 24, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44], "asset": [1, 15, 16, 17], "bibliographi": 1, "provid": [4, 6, 10, 16, 22], "load": [4, 11, 12, 13, 14, 22], "differ": [4, 20, 41], "us": [4, 8, 11, 12, 13, 14, 19, 20, 21, 22, 24, 26, 41, 44], "from": [4, 6, 8, 10, 11, 12, 13, 14, 15, 20, 21, 22, 23, 33, 39], "A": [4, 20, 21, 24], "place": 4, "where": [4, 11, 21, 22, 34, 40], "ar": [4, 8, 10, 21, 41], "In": [4, 8, 11, 13], "access": [4, 11, 12, 13, 14], "via": 4, "assetstor": 4, "multipl": [4, 6, 8, 19, 20], "By": 4, "default": [4, 22, 36, 44], "look": [4, 6, 24], "up": [4, 20, 24], "follow": [4, 6, 8, 20, 24, 28], "system": [4, 24], "share": [4, 21], "user": [4, 17, 22], "etc": 4, "thi": [4, 6, 8, 10, 11, 12, 13, 14, 15, 16, 17, 19, 21, 22, 24], "can": [4, 6, 8, 18, 21, 22, 24], "chang": 4, "environ": [4, 17], "variabl": [4, 11, 12, 13, 14], "fairseq2_asset_dir": 4, "onli": [4, 6, 8, 21, 22, 36], "avail": [4, 17], "config": 4, "fairseq2_user_asset_dir": 4, "To": 4, "regist": [4, 8], "new": [4, 10, 22], "implement": [4, 8, 11, 12, 41], "assetmetadataprovid": 4, "add": 4, "them": [4, 6, 8, 10, 22], "asset_stor": 4, "here": 4, "an": [4, 8, 11, 12, 13, 14, 15, 21, 23, 24, 26], "exampl": [4, 6, 20, 21, 22, 36], "directori": [4, 24], "pathlib": 4, "import": [4, 6, 8], "path": [4, 24, 28, 30, 31, 35], "fileassetmetadataprovid": 4, "my_dir": 4, "model_stor": 4, "metadata_provid": 4, "append": 4, "yaml": 4, "file": [4, 6, 18, 24, 28, 30, 31, 36], "contain": [4, 8, 11, 12, 13, 14, 15, 17, 21], "inform": [4, 15, 41, 42], "about": [4, 11, 15], "instruct": 4, "util": [4, 44], "generic_load": 4, "modelload": 4, "how": [4, 19], "memori": [4, 22, 24, 41], "each": [4, 10, 11, 12, 14, 15, 20, 21, 22, 30, 43], "must": [4, 8, 10, 21], "have": [4, 6, 8, 20, 21], "2": [4, 6, 11, 12, 13, 14, 20, 22, 36, 43], "mandatori": 4, "attribut": 4, "name": [4, 12, 15, 16, 17, 21, 24, 32, 36, 43], "checkpoint": 4, "identifi": 4, "uniqu": 4, "_across_": 4, "differen": 4, "llm": 4, "assetcard": [4, 17], "altern": 4, "one": [4, 8, 21, 31, 36], "call": [4, 11, 12, 13, 14, 21, 22, 36, 37, 38], "get_metadata": [4, 16], "str": [4, 6, 8, 15, 16, 17, 19, 21, 22, 28, 33, 34, 36, 39, 40, 41], "get": [4, 24, 34, 40], "meta": 4, "given": [4, 24, 36, 37], "python": [6, 21, 24], "build": 6, "c": 6, "datapipelin": [6, 22], "The": [6, 8, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 24, 26, 28, 29, 33, 34, 36, 39, 40, 41, 44], "dataload": [6, 21, 36], "abl": 6, "leverag": 6, "sever": [6, 21, 22, 24], "thread": 6, "work": [6, 10], "around": [6, 21], "global": [6, 17], "interpret": 6, "lock": 6, "limit": 6, "also": [6, 11, 21, 24], "better": 6, "perform": 6, "than": [6, 8, 22], "pure": 6, "like": 6, "read_text": [6, 36], "tsv": [6, 36], "map": [6, 15, 21, 22, 24, 36], "lambda": [6, 22, 36], "x": [6, 22, 36], "split": [6, 36], "t": [6, 8, 11, 12, 13, 14, 18, 36], "1": [6, 11, 12, 13, 14, 19, 20, 21, 22, 32, 34, 36, 43], "lower": 6, "filter": [6, 22], "len": 6, "function": [6, 21, 22, 36, 37, 38], "item": [6, 15], "go": [6, 36], "through": 6, "don": 6, "flat": 6, "tensor": [6, 10, 20, 33, 34, 38, 39, 40, 41, 44], "tupl": [6, 8, 20, 22], "dictionari": [6, 20, 21, 36], "oper": [6, 10, 21], "specifi": [6, 8, 15, 16, 17, 19, 21, 22, 24, 43], "specif": [6, 15, 20, 41], "input": [6, 10, 20, 22, 36], "notabl": 6, "datapipelinebuild": [6, 21, 28, 29, 30, 31], "ha": [6, 11, 16, 22], "selector": [6, 19, 22], "argument": [6, 41], "choos": 6, "appli": [6, 19, 22, 43], "If": [6, 8, 15, 17, 20, 21, 22, 28, 41, 44], "3": [6, 13, 20, 22], "select": [6, 22], "third": 6, "foo": [6, 8], "valu": [6, 11, 15, 20, 21, 32, 43], "correspond": [6, 12, 13, 14, 36], "kei": [6, 8, 15, 20, 21, 24, 31], "nest": 6, "separ": [6, 22], "For": [6, 20, 24], "y": 6, "4": [6, 11, 12, 13, 14, 20], "z": 6, "5": [6, 13, 20, 22], "bar": 6, "6": 6, "refer": [6, 11, 13, 41], "accept": 6, "comma": 6, "list": [6, 10, 11, 12, 13, 14, 16, 17, 20, 21, 22, 28, 34, 36, 40], "multipli": 6, "leav": 6, "unmodifi": 6, "count": [6, 21], "constant": [6, 21], "static": [6, 21], "method": [6, 8], "creat": [6, 8, 10, 19, 20, 21, 22, 36, 41], "when": [6, 18, 20, 21, 23, 25], "combin": [6, 21, 22], "e": [6, 11, 21], "g": [6, 21], "sampl": [6, 21, 22], "round_robin": [6, 21], "zip": [6, 21, 30], "thei": [6, 8, 22], "yield": [6, 21, 22], "long": [6, 20, 21], "read_sequ": 6, "pipeline1": 6, "0": [6, 10, 11, 12, 14, 20, 21, 22, 34, 36, 43], "and_return": [6, 22, 36], "pipeline2": 6, "print": 6, "produc": [6, 22], "repeat": [6, 21, 22], "do": 6, "exhibit": 6, "behavior": 6, "indefinit": 6, "even": 6, "helper": 6, "tool": 6, "token": [6, 26, 33, 34, 39, 40, 41], "convert": [6, 36, 44], "byte": [6, 24], "reli": 8, "invers": [8, 12, 13], "principl": 8, "maintain": 8, "clean": 8, "well": 8, "test": 8, "extens": 8, "code": 8, "base": [8, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 24, 26, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 43], "modul": [8, 32, 43], "abstract": [8, 10, 16, 17, 39, 40, 41], "class": [8, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 24, 26, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 43], "dependencyresolv": 8, "dependencycontain": 8, "standarddependencycontain": 8, "lightweight": 8, "inject": 8, "sourc": [8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44], "extend": 8, "abc": [8, 10, 16, 17, 22, 39, 40, 41], "resolv": [8, 17], "kl": 8, "type": [8, 10, 11, 12, 13, 14, 15, 16, 17, 20, 21, 22, 24, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44], "none": [8, 10, 11, 12, 13, 14, 15, 17, 19, 20, 21, 22, 24, 26, 28, 31, 32, 34, 35, 36, 38, 40, 41, 43, 44], "return": [8, 10, 11, 12, 13, 14, 15, 16, 17, 20, 21, 22, 24, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44], "singleton": 8, "cannot": 8, "found": 8, "lookuperror": 8, "rais": [8, 18, 21, 23, 25], "resolve_opt": 8, "similar": [8, 22], "instead": 8, "resolve_al": 8, "iter": [8, 21], "associ": [8, 10, 11, 12, 13, 14, 41], "last": [8, 11, 12, 13, 14, 20, 22, 24], "contrast": 8, "order": [8, 17, 32, 43], "were": 8, "empti": [8, 28], "resolve_all_kei": 8, "behav": [8, 21], "pair": 8, "factori": 8, "dependencyfactori": 8, "expect": [8, 22], "instanc": [8, 22], "It": [8, 11, 12, 13, 14, 21], "should": [8, 11, 12, 13, 14, 15, 19], "protocol": 8, "def": 8, "__call__": [8, 20, 24, 33, 34, 36, 37, 38, 39, 40], "self": [8, 11, 12, 13, 14, 22, 36, 37, 38], "pass": [8, 21], "construct": [8, 41], "itself": 8, "option": 8, "case": [8, 22], "same": [8, 19, 20, 21, 22, 24], "register_inst": 8, "obj": 8, "exist": 8, "final": [8, 11, 12, 13, 14, 15, 20, 21, 22, 24, 26, 33, 34, 35, 36, 37, 38], "standard": 8, "transit": 8, "abstractmethod": 8, "interfac": 8, "fooimpl": 8, "create_foo": 8, "assert": 8, "isinst": 8, "fairseq2": [10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 24, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45], "repres": [10, 11, 12, 13, 14, 17, 26, 41], "set": [10, 22], "process": [10, 22], "collect": [10, 22], "all_gath": 10, "output_tensor": 10, "input_tensor": 10, "gather": 10, "put": 10, "paramet": [10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 24, 28, 29, 33, 34, 36, 39, 40, 41, 44], "output": [10, 22], "accomod": 10, "all_gather_to_list": 10, "torch": 10, "all_reduc": 10, "op": 10, "reduc": 10, "across": 10, "reduceoper": 10, "element": [10, 26, 29], "wise": 10, "as_process_group": 10, "group": [10, 11, 12, 13, 14], "processgroup": 10, "barrier": 10, "synchron": 10, "broadcast": 10, "source_rank": 10, "sent": 10, "int": [10, 11, 12, 13, 14, 20, 21, 22, 24, 26, 36, 37], "rank": 10, "which": [10, 11, 12, 13, 14, 16, 17, 41], "broadcast_object": 10, "object": [10, 11, 12, 13, 14, 15, 19, 20, 21, 22, 24, 26, 35, 36, 37, 38], "picklabl": 10, "ani": [10, 15, 16, 20, 21, 22, 24, 27, 29, 44], "equal": 10, "size": [10, 21, 22, 26, 38], "close": 10, "destroi": 10, "create_gang": 10, "part": [10, 21], "properti": [10, 15, 21, 34, 40, 41], "devic": [10, 34, 41], "number": [10, 11, 12, 13, 14, 21, 22, 34, 40], "optim": [11, 12, 13, 14], "lr_schedul": [11, 12, 13, 14], "cycle_len": 11, "num_warmup_step": [11, 12, 13, 14], "cycle_mul": 11, "lr_mul": 11, "start_lr": [11, 12, 14], "final_lr": [11, 14], "last_epoch": [11, 12, 13, 14], "abstractlrschedul": [11, 12, 13, 14], "learn": [11, 12, 13, 14], "rate": [11, 12, 13, 14], "schedul": [11, 12, 13, 14], "describ": [11, 13, 20, 26, 43], "dure": [11, 14], "warmup": [11, 12, 13, 14], "eta_t": [11, 12, 13, 14], "eta_": [11, 12, 13, 14], "frac": [11, 12, 13, 14], "t_": [11, 12, 13, 14], "after": [11, 13, 14, 21, 43], "text": [11, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42], "co": 11, "pi": 11, "current": [11, 12, 13, 14, 21, 22], "anneal": 11, "cycl": 11, "t_i": 11, "step": [11, 12, 13, 14, 21], "taken": 11, "sinc": [11, 12, 13, 14], "total": [11, 14], "within": 11, "th": 11, "length": [11, 20], "cosin": 11, "effect": 11, "start": [11, 21, 32, 43], "larg": [11, 21], "rel": [11, 24], "rapidli": 11, "decreas": [11, 12, 13, 14], "minimum": [11, 22], "befor": 11, "being": [11, 22], "increas": [11, 12, 13, 14, 21], "again": 11, "pleas": [11, 12, 13, 14], "paper": [11, 13], "more": [11, 21, 22, 41], "detail": [11, 19, 21, 22], "addit": 11, "origin": [11, 12, 20], "support": 11, "phase": 11, "linearli": [11, 12, 13, 14], "first": [11, 12, 13, 14, 21, 36], "chainabl": [11, 12, 13, 14], "float": [11, 12, 13, 14, 21, 22, 44], "factor": 11, "grow": 11, "scale": [11, 12], "end": [11, 21, 26], "initi": [11, 12, 14], "respect": [11, 12, 14], "index": [11, 12, 13, 14, 22, 26], "epoch": [11, 12, 13, 14], "get_last_lr": [11, 12, 13, 14], "comput": [11, 12, 13, 14], "load_state_dict": [11, 12, 13, 14, 21], "state_dict": [11, 12, 13, 14, 21], "state": [11, 12, 13, 14, 21], "arg": [11, 12, 13, 14], "dict": [11, 12, 13, 14, 16, 20, 21, 24, 36], "print_lr": [11, 12, 13, 14], "is_verbos": [11, 12, 13, 14], "lr": [11, 12, 13, 14], "displai": [11, 12, 13, 14], "deprec": [11, 12, 13, 14], "version": [11, 12, 13, 14, 22], "entri": [11, 12, 13, 14, 36], "everi": [11, 12, 13, 14, 22, 29], "__dict__": [11, 12, 13, 14], "noamlr": 12, "preserv": [12, 20], "min": [12, 13], "sqrt": [12, 13], "essenti": 12, "squar": [12, 13], "root": [12, 13, 24], "wa": [12, 20], "propos": 12, "fairseq": 12, "under": [12, 28], "inversesquarerootlr": 12, "thereaft": [12, 13, 14], "proportion": [12, 13], "section": 13, "et": [13, 43], "al": [13, 43], "author": 13, "dimension": 13, "commonli": 13, "second": [13, 36], "num_step": 14, "power": 14, "polynomi": 14, "decai": 14, "p": 14, "degre": 14, "includ": 14, "over": [14, 21], "expon": 14, "metadata": [15, 16], "hold": 15, "mutablemap": 15, "held": 15, "card": [15, 17], "piec": 15, "deriv": 15, "field": 15, "doe": [15, 21], "its": [15, 21], "check": 15, "recurs": [15, 28], "assetcardfield": 15, "clear_cach": 16, "clear": 16, "cach": [16, 24], "get_nam": 16, "store": 17, "retrieve_card": 17, "env": 17, "scope": 17, "retriev": 17, "liter": 17, "para": 17, "preced": 17, "automat": [17, 22], "retrieve_nam": 17, "except": [18, 23, 25], "dataset": [18, 25], "read": [18, 21, 22, 23, 24, 25, 29, 30, 31, 36], "pad_valu": [19, 20, 22], "pad_to_multipl": [19, 20, 22], "overrid": [19, 20, 22], "collat": [19, 22], "batch": [19, 20, 22], "particular": [19, 22], "column": [19, 20, 22, 36], "pad": [19, 20, 26], "idx": 19, "see": [19, 21, 22], "syntax": [19, 22, 28], "concaten": [20, 21, 22], "singl": [20, 22], "dimens": 20, "otherwis": [20, 21], "requir": 20, "made": 20, "enough": 20, "fit": 20, "longest": 20, "round": [20, 21], "is_rag": 20, "true": [20, 21, 22, 41], "fals": [20, 21, 22, 31, 33, 34, 36, 41], "seq": [20, 29], "seq_len": 20, "shape": [20, 22, 34, 40, 44], "shortest": [20, 21], "alwai": 20, "collateoptionsoverrid": 20, "nativ": 21, "pipelin": [21, 22, 23, 31], "persist": 21, "disk": 21, "resum": 21, "later": 21, "twice": 21, "two": 21, "so": [21, 24], "inconcist": 21, "__iter__": [21, 32, 43], "modifi": 21, "intern": [21, 22], "": [21, 22, 34, 36, 37, 38, 40, 43], "safe": 21, "concat": 21, "repeatedli": 21, "pseudo": 21, "infinit": [21, 22], "restor": 21, "previous": 21, "reset": [21, 22], "reset_rng": [21, 22], "move": 21, "back": 21, "bool": [21, 22, 41], "random": [21, 22], "stop_at_shortest": 21, "allow_repeat": 21, "extract": 21, "robin": 21, "stop": 21, "reach": [21, 22], "circl": 21, "finish": 21, "until": 21, "weight": 21, "seed": [21, 22], "least": 21, "onc": [21, 22], "data_pipelin": 21, "desir": 21, "distribut": 21, "uniform": 21, "strict": 21, "posit": 21, "buffer": [21, 22], "save": 21, "ensur": 21, "preemption": 21, "lost": 21, "significantli": 21, "time": [21, 22], "zip_to_shortest": 21, "flatten": 21, "disable_parallel": 21, "togeth": 21, "assign": 21, "termin": 21, "non": [21, 28], "sequenti": 21, "is_broken": 21, "broken": 21, "futur": 21, "datapipelineerror": 21, "max_num_warn": 22, "bucket": 22, "bucket_s": 22, "drop_remaind": 22, "consecut": 22, "drop": 22, "fewer": 22, "bucket_by_length": 22, "min_data_len": 22, "skip_below_min_exampl": 22, "skip_above_max_exampl": 22, "equival": 22, "dynamic_bucket": 22, "threshold": 22, "cost_fn": 22, "bucket_creation_fn": 22, "min_num_exampl": 22, "max_num_exampl": 22, "cumul": 22, "cost": 22, "measur": 22, "meet": 22, "exce": 22, "trigger": 22, "callabl": 22, "creation": 22, "caus": 22, "exceed": 22, "new_bucket": 22, "remaind": 22, "ident": 22, "per": [22, 36], "maximum": 22, "yet": 22, "predic": 22, "keep": [22, 36], "those": 22, "who": 22, "match": [22, 28], "fn": 22, "num_parallel_cal": 22, "usag": [22, 36], "12": 22, "15": 22, "8": 22, "result": 22, "core": 22, "b": 22, "11": 22, "13": 22, "chain": 22, "f1": 22, "f2": 22, "effici": 22, "parallel": 22, "prefetch": 22, "num_exampl": 22, "background": 22, "while": [22, 23, 25, 41], "num_repeat": 22, "upon": 22, "shard": 22, "shard_idx": 22, "num_shard": 22, "allow_uneven": 22, "shuffl": 22, "shuffle_window": 22, "fix": 22, "intermedi": 22, "randomli": 22, "replac": 22, "full": 22, "skip": 22, "take": 22, "most": 22, "yield_from": 22, "error": 23, "occur": 23, "root_dir": 24, "cached_fd_count": 24, "slice": 24, "big_fil": 24, "txt": 24, "1024": 24, "48": 24, "offset": 24, "warn": 24, "enforc": 24, "happili": 24, "enabl": 24, "lru": 24, "especi": 24, "pathnam": 24, "pars": [24, 37], "memoryblock": 24, "block": 24, "regular": 24, "filemapperoutput": 24, "corrupt": 25, "record": 25, "encount": 25, "unk_idx": 26, "bos_idx": 26, "eos_idx": 26, "pad_idx": 26, "vocabulari": [26, 41, 42], "symbol": [26, 41], "begin": [26, 43], "bo": 26, "eo": 26, "unknown": 26, "unk": 26, "pattern": 28, "travers": 28, "fnmatch": 28, "archiv": 30, "encod": [31, 34, 40, 41], "line_end": 31, "lineend": 31, "infer": 31, "ltrim": 31, "rtrim": 31, "skip_empti": 31, "memory_map": 31, "block_siz": 31, "open": 31, "line": 31, "qualnam": [32, 43], "boundari": [32, 43], "enum": [32, 43], "classmethod": [32, 43], "member": [32, 43], "definit": [32, 43], "revers": [33, 34], "texttokendecod": [33, 41], "token_indic": [33, 39], "indic": [33, 34, 36, 39, 40, 41], "decod": [33, 39, 41], "decode_from_token": [33, 39], "prefix_token": 34, "suffix_token": 34, "enable_sampl": 34, "nbest_siz": 34, "alpha": 34, "pin_memori": [34, 41], "texttokenencod": [34, 41], "encode_as_token": [34, 40], "prefix_indic": [34, 40], "prefix": [34, 40], "suffix_indic": [34, 40], "suffix": [34, 40], "control_symbol": 35, "sep": 36, "exclud": 36, "string": 36, "charact": 36, "tab": 36, "Will": 36, "va": 36, "cc": 36, "BY": 36, "franc": 36, "tatoeba": 36, "en": [36, 41], "fr": 36, "integ": 37, "dtype": [38, 44], "create_decod": 41, "create_encod": 41, "lang": 41, "mode": 41, "valid": 41, "concret": 41, "subclass": 41, "typic": 41, "distinguish": 41, "between": 41, "transcript": 41, "multilingu": 41, "u": 41, "de": 41, "target": 41, "pin": 41, "create_raw_encod": 41, "raw": 41, "control": 41, "vocab_info": 41, "vocabularyinfo": [41, 42], "nn": [43, 44], "post": 43, "residu": 43, "connect": 43, "pre": 43, "pre_with_normform": 43, "mask": 44, "boolean": 44, "point": 44}, "objects": {"fairseq2.assets": [[15, 0, 1, "", "AssetCard"], [16, 0, 1, "", "AssetMetadataProvider"], [17, 0, 1, "", "AssetStore"]], "fairseq2.assets.AssetCard": [[15, 1, 1, "", "base"], [15, 2, 1, "", "field"], [15, 1, 1, "", "metadata"], [15, 1, 1, "", "name"]], "fairseq2.assets.AssetMetadataProvider": [[16, 2, 1, "", "clear_cache"], [16, 2, 1, "", "get_metadata"], [16, 2, 1, "", "get_names"]], "fairseq2.assets.AssetStore": [[17, 2, 1, "", "retrieve_card"], [17, 2, 1, "", "retrieve_names"]], "fairseq2.data": [[18, 3, 1, "", "ByteStreamError"], [19, 0, 1, "", "CollateOptionsOverride"], [20, 0, 1, "", "Collater"], [21, 0, 1, "", "DataPipeline"], [22, 0, 1, "", "DataPipelineBuilder"], [23, 3, 1, "", "DataPipelineError"], [24, 0, 1, "", "FileMapper"], [25, 3, 1, "", "RecordError"], [26, 0, 1, "", "VocabularyInfo"], [27, 5, 1, "", "get_last_failed_example"], [28, 5, 1, "", "list_files"], [29, 5, 1, "", "read_sequence"], [30, 5, 1, "", "read_zipped_records"]], "fairseq2.data.Collater": [[20, 2, 1, "", "__call__"]], "fairseq2.data.DataPipeline": [[21, 2, 1, "", "__iter__"], [21, 2, 1, "", "concat"], [21, 2, 1, "", "constant"], [21, 2, 1, "", "count"], [21, 1, 1, "", "is_broken"], [21, 2, 1, "", "load_state_dict"], [21, 2, 1, "", "reset"], [21, 2, 1, "", "round_robin"], [21, 2, 1, "", "sample"], [21, 2, 1, "", "state_dict"], [21, 2, 1, "", "zip"]], "fairseq2.data.DataPipelineBuilder": [[22, 2, 1, "", "and_return"], [22, 2, 1, "", "bucket"], [22, 2, 1, "", "bucket_by_length"], [22, 2, 1, "", "collate"], [22, 2, 1, "", "dynamic_bucket"], [22, 2, 1, "", "filter"], [22, 2, 1, "", "map"], [22, 2, 1, "", "prefetch"], [22, 2, 1, "", "repeat"], [22, 2, 1, "", "shard"], [22, 2, 1, "", "shuffle"], [22, 2, 1, "", "skip"], [22, 2, 1, "", "take"], [22, 2, 1, "", "yield_from"]], "fairseq2.data.FileMapper": [[24, 2, 1, "", "__call__"]], "fairseq2.data.VocabularyInfo": [[26, 4, 1, "", "bos_idx"], [26, 4, 1, "", "eos_idx"], [26, 4, 1, "", "pad_idx"], [26, 4, 1, "", "size"], [26, 4, 1, "", "unk_idx"]], "fairseq2.data.text": [[32, 0, 1, "", "LineEnding"], [33, 0, 1, "", "SentencePieceDecoder"], [34, 0, 1, "", "SentencePieceEncoder"], [35, 0, 1, "", "SentencePieceModel"], [36, 0, 1, "", "StrSplitter"], [37, 0, 1, "", "StrToIntConverter"], [38, 0, 1, "", "StrToTensorConverter"], [39, 0, 1, "", "TextTokenDecoder"], [40, 0, 1, "", "TextTokenEncoder"], [41, 0, 1, "", "TextTokenizer"], [31, 5, 1, "", "read_text"], [42, 5, 1, "", "vocab_info_from_sentencepiece"]], "fairseq2.data.text.LineEnding": [[32, 2, 1, "", "__iter__"]], "fairseq2.data.text.SentencePieceDecoder": [[33, 2, 1, "", "__call__"], [33, 2, 1, "", "decode_from_tokens"]], "fairseq2.data.text.SentencePieceEncoder": [[34, 2, 1, "", "__call__"], [34, 2, 1, "", "encode_as_tokens"], [34, 1, 1, "", "prefix_indices"], [34, 1, 1, "", "suffix_indices"]], "fairseq2.data.text.StrSplitter": [[36, 2, 1, "", "__call__"]], "fairseq2.data.text.StrToIntConverter": [[37, 2, 1, "", "__call__"]], "fairseq2.data.text.StrToTensorConverter": [[38, 2, 1, "", "__call__"]], "fairseq2.data.text.TextTokenDecoder": [[39, 2, 1, "", "__call__"], [39, 2, 1, "", "decode_from_tokens"]], "fairseq2.data.text.TextTokenEncoder": [[40, 2, 1, "", "__call__"], [40, 2, 1, "", "encode_as_tokens"], [40, 1, 1, "", "prefix_indices"], [40, 1, 1, "", "suffix_indices"]], "fairseq2.data.text.TextTokenizer": [[41, 2, 1, "", "create_decoder"], [41, 2, 1, "", "create_encoder"], [41, 2, 1, "", "create_raw_encoder"], [41, 1, 1, "", "vocab_info"]], "fairseq2": [[8, 6, 0, "-", "dependency"]], "fairseq2.dependency": [[8, 0, 1, "", "DependencyContainer"], [8, 0, 1, "", "DependencyResolver"], [8, 0, 1, "", "StandardDependencyContainer"]], "fairseq2.dependency.DependencyResolver": [[8, 2, 1, "", "resolve_all"], [8, 2, 1, "", "resolve_all_keyed"], [8, 2, 1, "", "resolve_optional"]], "fairseq2.gang": [[10, 0, 1, "", "Gang"]], "fairseq2.gang.Gang": [[10, 2, 1, "", "all_gather"], [10, 2, 1, "", "all_gather_to_list"], [10, 2, 1, "", "all_reduce"], [10, 2, 1, "", "as_process_group"], [10, 2, 1, "", "barrier"], [10, 2, 1, "", "broadcast"], [10, 2, 1, "", "broadcast_objects"], [10, 2, 1, "", "close"], [10, 2, 1, "", "create_gang"], [10, 1, 1, "", "device"], [10, 1, 1, "", "rank"], [10, 1, 1, "", "size"]], "fairseq2.nn.transformer": [[43, 0, 1, "", "TransformerNormOrder"]], "fairseq2.nn.transformer.TransformerNormOrder": [[43, 4, 1, "", "POST"], [43, 4, 1, "", "PRE"], [43, 4, 1, "", "PRE_WITH_NORMFORMER"], [43, 2, 1, "", "__iter__"]], "fairseq2.nn.utils.mask": [[44, 5, 1, "", "to_float_mask"]], "fairseq2.optim.lr_scheduler": [[11, 0, 1, "", "CosineAnnealingLR"], [12, 0, 1, "", "MyleLR"], [13, 0, 1, "", "NoamLR"], [14, 0, 1, "", "PolynomialDecayLR"]], "fairseq2.optim.lr_scheduler.CosineAnnealingLR": [[11, 2, 1, "", "get_last_lr"], [11, 2, 1, "", "load_state_dict"], [11, 2, 1, "", "print_lr"], [11, 2, 1, "", "state_dict"]], "fairseq2.optim.lr_scheduler.MyleLR": [[12, 2, 1, "", "get_last_lr"], [12, 2, 1, "", "load_state_dict"], [12, 2, 1, "", "print_lr"], [12, 2, 1, "", "state_dict"]], "fairseq2.optim.lr_scheduler.NoamLR": [[13, 2, 1, "", "get_last_lr"], [13, 2, 1, "", "load_state_dict"], [13, 2, 1, "", "print_lr"], [13, 2, 1, "", "state_dict"]], "fairseq2.optim.lr_scheduler.PolynomialDecayLR": [[14, 2, 1, "", "get_last_lr"], [14, 2, 1, "", "load_state_dict"], [14, 2, 1, "", "print_lr"], [14, 2, 1, "", "state_dict"]]}, "objtypes": {"0": "py:class", "1": "py:property", "2": "py:method", "3": "py:exception", "4": "py:attribute", "5": "py:function", "6": "py:module"}, "objnames": {"0": ["py", "class", "Python class"], "1": ["py", "property", "Python property"], "2": ["py", "method", "Python method"], "3": ["py", "exception", "Python exception"], "4": ["py", "attribute", "Python attribute"], "5": ["py", "function", "Python function"], "6": ["py", "module", "Python module"]}, "titleterms": {"bibliographi": 0, "fairseq2": [1, 4, 6, 8, 18, 23, 25], "document": 1, "refer": [1, 45], "misc": 1, "abc": [2, 3], "protocol": [2, 3], "all": 3, "class": [3, 5, 6], "enum": [3, 7], "function": [3, 9], "asset": 4, "model": 4, "store": 4, "card": 4, "data": [6, 18, 23, 25], "column": 6, "syntax": 6, "pseudo": 6, "infinit": 6, "pipelin": 6, "public": 6, "us": 6, "api": [6, 45], "text": 6, "depend": 8, "gang": 10, "cosineannealinglr": 11, "mylelr": 12, "noamlr": 13, "polynomialdecaylr": 14, "assetcard": 15, "assetmetadataprovid": 16, "assetstor": 17, "bytestreamerror": 18, "collateoptionsoverrid": 19, "collat": 20, "datapipelin": 21, "datapipelinebuild": 22, "datapipelineerror": 23, "filemapp": 24, "recorderror": 25, "vocabularyinfo": 26, "get_last_failed_exampl": 27, "list_fil": 28, "read_sequ": 29, "read_zipped_record": 30, "read_text": 31, "lineend": 32, "sentencepiecedecod": 33, "sentencepieceencod": 34, "sentencepiecemodel": 35, "strsplitter": 36, "strtointconvert": 37, "strtotensorconvert": 38, "texttokendecod": 39, "texttokenencod": 40, "texttoken": 41, "vocab_info_from_sentencepiec": 42, "transformernormord": 43, "to_float_mask": 44}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx.ext.todo": 2, "sphinx.ext.viewcode": 1, "sphinxcontrib.bibtex": 9, "sphinx": 57}, "alltitles": {"Bibliography": [[0, "bibliography"]], "fairseq2 documentation": [[1, "fairseq2-documentation"]], "fairseq2 Reference": [[1, null]], "Misc": [[1, null]], "ABCs and Protocols": [[2, "abcs-and-protocols"], [3, "abcs-and-protocols"]], "All": [[3, "all"]], "Classes": [[3, "classes"], [5, "classes"]], "Enums": [[3, "enums"], [7, "enums"]], "Functions": [[3, "functions"], [9, "functions"]], "fairseq2.assets": [[4, "fairseq2-assets"]], "Model store": [[4, "model-store"]], "Model card": [[4, "model-card"]], "fairseq2.data": [[6, "fairseq2-data"]], "Column syntax": [[6, "column-syntax"]], "Pseudo-infinite and Infinite Pipelines": [[6, "pseudo-infinite-and-infinite-pipelines"]], "Public classes used in fairseq2 API:": [[6, "public-classes-used-in-fairseq2-api"]], "fairseq2.data.text": [[6, "fairseq2-data-text"]], "fairseq2.dependency": [[8, "module-fairseq2.dependency"]], "Gang": [[10, "gang"]], "CosineAnnealingLR": [[11, "cosineannealinglr"]], "MyleLR": [[12, "mylelr"]], "NoamLR": [[13, "noamlr"]], "PolynomialDecayLR": [[14, "polynomialdecaylr"]], "AssetCard": [[15, "assetcard"]], "AssetMetadataProvider": [[16, "assetmetadataprovider"]], "AssetStore": [[17, "assetstore"]], "fairseq2.data.ByteStreamError": [[18, "fairseq2-data-bytestreamerror"]], "CollateOptionsOverride": [[19, "collateoptionsoverride"]], "Collater": [[20, "collater"]], "DataPipeline": [[21, "datapipeline"]], "DataPipelineBuilder": [[22, "datapipelinebuilder"]], "fairseq2.data.DataPipelineError": [[23, "fairseq2-data-datapipelineerror"]], "FileMapper": [[24, "filemapper"]], "fairseq2.data.RecordError": [[25, "fairseq2-data-recorderror"]], "VocabularyInfo": [[26, "vocabularyinfo"]], "get_last_failed_example": [[27, "get-last-failed-example"]], "list_files": [[28, "list-files"]], "read_sequence": [[29, "read-sequence"]], "read_zipped_records": [[30, "read-zipped-records"]], "read_text": [[31, "read-text"]], "LineEnding": [[32, "lineending"]], "SentencePieceDecoder": [[33, "sentencepiecedecoder"]], "SentencePieceEncoder": [[34, "sentencepieceencoder"]], "SentencePieceModel": [[35, "sentencepiecemodel"]], "StrSplitter": [[36, "strsplitter"]], "StrToIntConverter": [[37, "strtointconverter"]], "StrToTensorConverter": [[38, "strtotensorconverter"]], "TextTokenDecoder": [[39, "texttokendecoder"]], "TextTokenEncoder": [[40, "texttokenencoder"]], "TextTokenizer": [[41, "texttokenizer"]], "vocab_info_from_sentencepiece": [[42, "vocab-info-from-sentencepiece"]], "TransformerNormOrder": [[43, "transformernormorder"]], "to_float_mask": [[44, "to-float-mask"]], "API Reference": [[45, "api-reference"]]}, "indexentries": {"dependencycontainer (class in fairseq2.dependency)": [[8, "fairseq2.dependency.DependencyContainer"]], "dependencyresolver (class in fairseq2.dependency)": [[8, "fairseq2.dependency.DependencyResolver"]], "standarddependencycontainer (class in fairseq2.dependency)": [[8, "fairseq2.dependency.StandardDependencyContainer"]], "fairseq2.dependency": [[8, "module-fairseq2.dependency"]], "module": [[8, "module-fairseq2.dependency"]], "resolve_all() (fairseq2.dependency.dependencyresolver method)": [[8, "fairseq2.dependency.DependencyResolver.resolve_all"]], "resolve_all_keyed() (fairseq2.dependency.dependencyresolver method)": [[8, "fairseq2.dependency.DependencyResolver.resolve_all_keyed"]], "resolve_optional() (fairseq2.dependency.dependencyresolver method)": [[8, "fairseq2.dependency.DependencyResolver.resolve_optional"]], "gang (class in fairseq2.gang)": [[10, "fairseq2.gang.Gang"]], "all_gather() (fairseq2.gang.gang method)": [[10, "fairseq2.gang.Gang.all_gather"]], "all_gather_to_list() (fairseq2.gang.gang method)": [[10, "fairseq2.gang.Gang.all_gather_to_list"]], "all_reduce() (fairseq2.gang.gang method)": [[10, "fairseq2.gang.Gang.all_reduce"]], "as_process_group() (fairseq2.gang.gang method)": [[10, "fairseq2.gang.Gang.as_process_group"]], "barrier() (fairseq2.gang.gang method)": [[10, "fairseq2.gang.Gang.barrier"]], "broadcast() (fairseq2.gang.gang method)": [[10, "fairseq2.gang.Gang.broadcast"]], "broadcast_objects() (fairseq2.gang.gang method)": [[10, "fairseq2.gang.Gang.broadcast_objects"]], "close() (fairseq2.gang.gang method)": [[10, "fairseq2.gang.Gang.close"]], "create_gang() (fairseq2.gang.gang method)": [[10, "fairseq2.gang.Gang.create_gang"]], "device (fairseq2.gang.gang property)": [[10, "fairseq2.gang.Gang.device"]], "rank (fairseq2.gang.gang property)": [[10, "fairseq2.gang.Gang.rank"]], "size (fairseq2.gang.gang property)": [[10, "fairseq2.gang.Gang.size"]], "cosineannealinglr (class in fairseq2.optim.lr_scheduler)": [[11, "fairseq2.optim.lr_scheduler.CosineAnnealingLR"]], "get_last_lr() (fairseq2.optim.lr_scheduler.cosineannealinglr method)": [[11, "fairseq2.optim.lr_scheduler.CosineAnnealingLR.get_last_lr"]], "load_state_dict() (fairseq2.optim.lr_scheduler.cosineannealinglr method)": [[11, "fairseq2.optim.lr_scheduler.CosineAnnealingLR.load_state_dict"]], "print_lr() (fairseq2.optim.lr_scheduler.cosineannealinglr method)": [[11, "fairseq2.optim.lr_scheduler.CosineAnnealingLR.print_lr"]], "state_dict() (fairseq2.optim.lr_scheduler.cosineannealinglr method)": [[11, "fairseq2.optim.lr_scheduler.CosineAnnealingLR.state_dict"]], "mylelr (class in fairseq2.optim.lr_scheduler)": [[12, "fairseq2.optim.lr_scheduler.MyleLR"]], "get_last_lr() (fairseq2.optim.lr_scheduler.mylelr method)": [[12, "fairseq2.optim.lr_scheduler.MyleLR.get_last_lr"]], "load_state_dict() (fairseq2.optim.lr_scheduler.mylelr method)": [[12, "fairseq2.optim.lr_scheduler.MyleLR.load_state_dict"]], "print_lr() (fairseq2.optim.lr_scheduler.mylelr method)": [[12, "fairseq2.optim.lr_scheduler.MyleLR.print_lr"]], "state_dict() (fairseq2.optim.lr_scheduler.mylelr method)": [[12, "fairseq2.optim.lr_scheduler.MyleLR.state_dict"]], "noamlr (class in fairseq2.optim.lr_scheduler)": [[13, "fairseq2.optim.lr_scheduler.NoamLR"]], "get_last_lr() (fairseq2.optim.lr_scheduler.noamlr method)": [[13, "fairseq2.optim.lr_scheduler.NoamLR.get_last_lr"]], "load_state_dict() (fairseq2.optim.lr_scheduler.noamlr method)": [[13, "fairseq2.optim.lr_scheduler.NoamLR.load_state_dict"]], "print_lr() (fairseq2.optim.lr_scheduler.noamlr method)": [[13, "fairseq2.optim.lr_scheduler.NoamLR.print_lr"]], "state_dict() (fairseq2.optim.lr_scheduler.noamlr method)": [[13, "fairseq2.optim.lr_scheduler.NoamLR.state_dict"]], "polynomialdecaylr (class in fairseq2.optim.lr_scheduler)": [[14, "fairseq2.optim.lr_scheduler.PolynomialDecayLR"]], "get_last_lr() (fairseq2.optim.lr_scheduler.polynomialdecaylr method)": [[14, "fairseq2.optim.lr_scheduler.PolynomialDecayLR.get_last_lr"]], "load_state_dict() (fairseq2.optim.lr_scheduler.polynomialdecaylr method)": [[14, "fairseq2.optim.lr_scheduler.PolynomialDecayLR.load_state_dict"]], "print_lr() (fairseq2.optim.lr_scheduler.polynomialdecaylr method)": [[14, "fairseq2.optim.lr_scheduler.PolynomialDecayLR.print_lr"]], "state_dict() (fairseq2.optim.lr_scheduler.polynomialdecaylr method)": [[14, "fairseq2.optim.lr_scheduler.PolynomialDecayLR.state_dict"]], "assetcard (class in fairseq2.assets)": [[15, "fairseq2.assets.AssetCard"]], "base (fairseq2.assets.assetcard property)": [[15, "fairseq2.assets.AssetCard.base"]], "field() (fairseq2.assets.assetcard method)": [[15, "fairseq2.assets.AssetCard.field"]], "metadata (fairseq2.assets.assetcard property)": [[15, "fairseq2.assets.AssetCard.metadata"]], "name (fairseq2.assets.assetcard property)": [[15, "fairseq2.assets.AssetCard.name"]], "assetmetadataprovider (class in fairseq2.assets)": [[16, "fairseq2.assets.AssetMetadataProvider"]], "clear_cache() (fairseq2.assets.assetmetadataprovider method)": [[16, "fairseq2.assets.AssetMetadataProvider.clear_cache"]], "get_metadata() (fairseq2.assets.assetmetadataprovider method)": [[16, "fairseq2.assets.AssetMetadataProvider.get_metadata"]], "get_names() (fairseq2.assets.assetmetadataprovider method)": [[16, "fairseq2.assets.AssetMetadataProvider.get_names"]], "assetstore (class in fairseq2.assets)": [[17, "fairseq2.assets.AssetStore"]], "retrieve_card() (fairseq2.assets.assetstore method)": [[17, "fairseq2.assets.AssetStore.retrieve_card"]], "retrieve_names() (fairseq2.assets.assetstore method)": [[17, "fairseq2.assets.AssetStore.retrieve_names"]], "bytestreamerror": [[18, "fairseq2.data.ByteStreamError"]], "collateoptionsoverride (class in fairseq2.data)": [[19, "fairseq2.data.CollateOptionsOverride"]], "collater (class in fairseq2.data)": [[20, "fairseq2.data.Collater"]], "__call__() (fairseq2.data.collater method)": [[20, "fairseq2.data.Collater.__call__"]], "datapipeline (class in fairseq2.data)": [[21, "fairseq2.data.DataPipeline"]], "__iter__() (fairseq2.data.datapipeline method)": [[21, "fairseq2.data.DataPipeline.__iter__"]], "concat() (fairseq2.data.datapipeline static method)": [[21, "fairseq2.data.DataPipeline.concat"]], "constant() (fairseq2.data.datapipeline static method)": [[21, "fairseq2.data.DataPipeline.constant"]], "count() (fairseq2.data.datapipeline static method)": [[21, "fairseq2.data.DataPipeline.count"]], "is_broken (fairseq2.data.datapipeline property)": [[21, "fairseq2.data.DataPipeline.is_broken"]], "load_state_dict() (fairseq2.data.datapipeline method)": [[21, "fairseq2.data.DataPipeline.load_state_dict"]], "reset() (fairseq2.data.datapipeline method)": [[21, "fairseq2.data.DataPipeline.reset"]], "round_robin() (fairseq2.data.datapipeline static method)": [[21, "fairseq2.data.DataPipeline.round_robin"]], "sample() (fairseq2.data.datapipeline static method)": [[21, "fairseq2.data.DataPipeline.sample"]], "state_dict() (fairseq2.data.datapipeline method)": [[21, "fairseq2.data.DataPipeline.state_dict"]], "zip() (fairseq2.data.datapipeline static method)": [[21, "fairseq2.data.DataPipeline.zip"]], "datapipelinebuilder (class in fairseq2.data)": [[22, "fairseq2.data.DataPipelineBuilder"]], "and_return() (fairseq2.data.datapipelinebuilder method)": [[22, "fairseq2.data.DataPipelineBuilder.and_return"]], "bucket() (fairseq2.data.datapipelinebuilder method)": [[22, "fairseq2.data.DataPipelineBuilder.bucket"]], "bucket_by_length() (fairseq2.data.datapipelinebuilder method)": [[22, "fairseq2.data.DataPipelineBuilder.bucket_by_length"]], "collate() (fairseq2.data.datapipelinebuilder method)": [[22, "fairseq2.data.DataPipelineBuilder.collate"]], "dynamic_bucket() (fairseq2.data.datapipelinebuilder method)": [[22, "fairseq2.data.DataPipelineBuilder.dynamic_bucket"]], "filter() (fairseq2.data.datapipelinebuilder method)": [[22, "fairseq2.data.DataPipelineBuilder.filter"]], "map() (fairseq2.data.datapipelinebuilder method)": [[22, "fairseq2.data.DataPipelineBuilder.map"]], "prefetch() (fairseq2.data.datapipelinebuilder method)": [[22, "fairseq2.data.DataPipelineBuilder.prefetch"]], "repeat() (fairseq2.data.datapipelinebuilder method)": [[22, "fairseq2.data.DataPipelineBuilder.repeat"]], "shard() (fairseq2.data.datapipelinebuilder method)": [[22, "fairseq2.data.DataPipelineBuilder.shard"]], "shuffle() (fairseq2.data.datapipelinebuilder method)": [[22, "fairseq2.data.DataPipelineBuilder.shuffle"]], "skip() (fairseq2.data.datapipelinebuilder method)": [[22, "fairseq2.data.DataPipelineBuilder.skip"]], "take() (fairseq2.data.datapipelinebuilder method)": [[22, "fairseq2.data.DataPipelineBuilder.take"]], "yield_from() (fairseq2.data.datapipelinebuilder method)": [[22, "fairseq2.data.DataPipelineBuilder.yield_from"]], "datapipelineerror": [[23, "fairseq2.data.DataPipelineError"]], "filemapper (class in fairseq2.data)": [[24, "fairseq2.data.FileMapper"]], "__call__() (fairseq2.data.filemapper method)": [[24, "fairseq2.data.FileMapper.__call__"]], "recorderror": [[25, "fairseq2.data.RecordError"]], "vocabularyinfo (class in fairseq2.data)": [[26, "fairseq2.data.VocabularyInfo"]], "bos_idx (fairseq2.data.vocabularyinfo attribute)": [[26, "fairseq2.data.VocabularyInfo.bos_idx"]], "eos_idx (fairseq2.data.vocabularyinfo attribute)": [[26, "fairseq2.data.VocabularyInfo.eos_idx"]], "pad_idx (fairseq2.data.vocabularyinfo attribute)": [[26, "fairseq2.data.VocabularyInfo.pad_idx"]], "size (fairseq2.data.vocabularyinfo attribute)": [[26, "fairseq2.data.VocabularyInfo.size"]], "unk_idx (fairseq2.data.vocabularyinfo attribute)": [[26, "fairseq2.data.VocabularyInfo.unk_idx"]], "get_last_failed_example() (in module fairseq2.data)": [[27, "fairseq2.data.get_last_failed_example"]], "list_files() (in module fairseq2.data)": [[28, "fairseq2.data.list_files"]], "read_sequence() (in module fairseq2.data)": [[29, "fairseq2.data.read_sequence"]], "read_zipped_records() (in module fairseq2.data)": [[30, "fairseq2.data.read_zipped_records"]], "read_text() (in module fairseq2.data.text)": [[31, "fairseq2.data.text.read_text"]], "lineending (class in fairseq2.data.text)": [[32, "fairseq2.data.text.LineEnding"]], "__iter__() (fairseq2.data.text.lineending class method)": [[32, "fairseq2.data.text.LineEnding.__iter__"]], "sentencepiecedecoder (class in fairseq2.data.text)": [[33, "fairseq2.data.text.SentencePieceDecoder"]], "__call__() (fairseq2.data.text.sentencepiecedecoder method)": [[33, "fairseq2.data.text.SentencePieceDecoder.__call__"]], "decode_from_tokens() (fairseq2.data.text.sentencepiecedecoder method)": [[33, "fairseq2.data.text.SentencePieceDecoder.decode_from_tokens"]], "sentencepieceencoder (class in fairseq2.data.text)": [[34, "fairseq2.data.text.SentencePieceEncoder"]], "__call__() (fairseq2.data.text.sentencepieceencoder method)": [[34, "fairseq2.data.text.SentencePieceEncoder.__call__"]], "encode_as_tokens() (fairseq2.data.text.sentencepieceencoder method)": [[34, "fairseq2.data.text.SentencePieceEncoder.encode_as_tokens"]], "prefix_indices (fairseq2.data.text.sentencepieceencoder property)": [[34, "fairseq2.data.text.SentencePieceEncoder.prefix_indices"]], "suffix_indices (fairseq2.data.text.sentencepieceencoder property)": [[34, "fairseq2.data.text.SentencePieceEncoder.suffix_indices"]], "sentencepiecemodel (class in fairseq2.data.text)": [[35, "fairseq2.data.text.SentencePieceModel"]], "strsplitter (class in fairseq2.data.text)": [[36, "fairseq2.data.text.StrSplitter"]], "__call__() (fairseq2.data.text.strsplitter method)": [[36, "fairseq2.data.text.StrSplitter.__call__"]], "strtointconverter (class in fairseq2.data.text)": [[37, "fairseq2.data.text.StrToIntConverter"]], "__call__() (fairseq2.data.text.strtointconverter method)": [[37, "fairseq2.data.text.StrToIntConverter.__call__"]], "strtotensorconverter (class in fairseq2.data.text)": [[38, "fairseq2.data.text.StrToTensorConverter"]], "__call__() (fairseq2.data.text.strtotensorconverter method)": [[38, "fairseq2.data.text.StrToTensorConverter.__call__"]], "texttokendecoder (class in fairseq2.data.text)": [[39, "fairseq2.data.text.TextTokenDecoder"]], "__call__() (fairseq2.data.text.texttokendecoder method)": [[39, "fairseq2.data.text.TextTokenDecoder.__call__"]], "decode_from_tokens() (fairseq2.data.text.texttokendecoder method)": [[39, "fairseq2.data.text.TextTokenDecoder.decode_from_tokens"]], "texttokenencoder (class in fairseq2.data.text)": [[40, "fairseq2.data.text.TextTokenEncoder"]], "__call__() (fairseq2.data.text.texttokenencoder method)": [[40, "fairseq2.data.text.TextTokenEncoder.__call__"]], "encode_as_tokens() (fairseq2.data.text.texttokenencoder method)": [[40, "fairseq2.data.text.TextTokenEncoder.encode_as_tokens"]], "prefix_indices (fairseq2.data.text.texttokenencoder property)": [[40, "fairseq2.data.text.TextTokenEncoder.prefix_indices"]], "suffix_indices (fairseq2.data.text.texttokenencoder property)": [[40, "fairseq2.data.text.TextTokenEncoder.suffix_indices"]], "texttokenizer (class in fairseq2.data.text)": [[41, "fairseq2.data.text.TextTokenizer"]], "create_decoder() (fairseq2.data.text.texttokenizer method)": [[41, "fairseq2.data.text.TextTokenizer.create_decoder"]], "create_encoder() (fairseq2.data.text.texttokenizer method)": [[41, "fairseq2.data.text.TextTokenizer.create_encoder"]], "create_raw_encoder() (fairseq2.data.text.texttokenizer method)": [[41, "fairseq2.data.text.TextTokenizer.create_raw_encoder"]], "vocab_info (fairseq2.data.text.texttokenizer property)": [[41, "fairseq2.data.text.TextTokenizer.vocab_info"]], "vocab_info_from_sentencepiece() (in module fairseq2.data.text)": [[42, "fairseq2.data.text.vocab_info_from_sentencepiece"]], "post (fairseq2.nn.transformer.transformernormorder attribute)": [[43, "fairseq2.nn.transformer.TransformerNormOrder.POST"]], "pre (fairseq2.nn.transformer.transformernormorder attribute)": [[43, "fairseq2.nn.transformer.TransformerNormOrder.PRE"]], "pre_with_normformer (fairseq2.nn.transformer.transformernormorder attribute)": [[43, "fairseq2.nn.transformer.TransformerNormOrder.PRE_WITH_NORMFORMER"]], "transformernormorder (class in fairseq2.nn.transformer)": [[43, "fairseq2.nn.transformer.TransformerNormOrder"]], "__iter__() (fairseq2.nn.transformer.transformernormorder class method)": [[43, "fairseq2.nn.transformer.TransformerNormOrder.__iter__"]], "to_float_mask() (in module fairseq2.nn.utils.mask)": [[44, "fairseq2.nn.utils.mask.to_float_mask"]]}})